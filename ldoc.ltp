# -- Set this to true when you want to generate types as globals instead of modules
# local as_globals = false
#
# function lua_to_ts(input)
#   local parsed, rest = lua_to_ts_inner(input)
#
#   if rest:sub(1, 1) ~= '|' then
#     return parsed, rest
#   end
#   while rest:sub(1, 1) == '|' do
#     local parsed_next
#     parsed_next, rest = lua_to_ts_inner(rest:sub(2))
#     parsed = parsed .. ' | ' .. parsed_next
#   end
#
#   return '(' .. parsed .. ')', rest
# end
#
# function lua_to_ts_inner(input)
#   local first_char = input:sub(1, 1)
#   if first_char == '(' then
#     local parsed, rest = parse_parens(input:sub(2))
#     return parsed, rest
#   elseif first_char == '{' then
#     local parsed, rest = parse_table(input:sub(2))
#     return parsed, rest
#   end
#
#   local found = input:find('[%[%]%(%){}|,]')
#   if found == nil then
#     return convert_ident(input), ''
#   else
#     return convert_ident(input:sub(1, found - 1)), input:sub(found)
#   end
# end
#
# function convert_ident(t)
#   if t == 'nil' then
#     return 'null'
#   elseif t == 'int' then
#     return 'number'
#   elseif t == 'bool' then
#     return 'boolean'
#   elseif t == 'func' then
#     return '(...x: any[]) => any'
#   elseif t == 'tab' or t == 'table' then
#     return 'object'
#   end
#   return t
# end
#
# function parse_parens(input)
#   local parsed, rest = lua_to_ts(input)
#   if rest:sub(1, 1) == ')' then
#     return '(' .. parsed .. ')', rest:sub(2)
#   else
#     -- Failed to match parenthesis
#     return parsed, rest
#   end
# end
#
# function parse_table(input)
#   -- Map
#   if input:sub(1, 1) == '[' then
#     local parsed_key, rest = lua_to_ts(input:sub(2))
#     -- Skip "]="
#     local parsed_value
#     parsed_value, rest = lua_to_ts(rest:sub(3))
#     -- Skip ",..."
#     local found = rest:find('[}]')
#     if found == nil then
#       return '{[x: ' .. parsed_key .. ']: ' .. parsed_value .. '}', rest
#     else
#       return '{[x: ' .. parsed_key .. ']: ' .. parsed_value .. '}', rest:sub(found)
#     end
#   end
#
#   local parsed, rest, is_struct = parse_table_el(input)
#   local list = { parsed }
#
#   while rest:sub(1, 1) == ',' do
#     parsed, rest = parse_table_el(rest:sub(2))
#     list[#list + 1] = parsed
#   end
#
#   -- Array
#   if list[#list] == '...' then
#     return list[1] .. '[]', rest:sub(2)
#   end
#
#  if is_struct then
#    -- Struct
#    local result = '{'
#    for i, v in ldoc.ipairs(list) do
#      if i ~= 1 then
#        result = result .. ', '
#      end
#      result = result .. v
#    end
#    return result .. '}', rest:sub(2)
#  else
#    -- Tuple
#    local result = '['
#    for i, v in ldoc.ipairs(list) do
#      if i ~= 1 then
#        result = result .. ', '
#      end
#      result = result .. v
#    end
#    return result .. ']', rest:sub(2)
#  end
# end
#
# function parse_table_el(input)
#   local potential_ident = input:find('[%[%]%(%){}|,]')
#   if potential_ident ~= nil then
#     local equals = input:sub(1, potential_ident):find('=')
#     if equals ~= nil then
#       local ident = input:sub(1, equals - 1)
#       local parsed, rest = lua_to_ts(input:sub(equals + 1))
#       return ident .. ': ' .. parsed, rest, true
#     end
#   end
#
#   local parsed, rest = lua_to_ts(input)
#   return parsed, rest, false
# end
#
# function retgroup_to_ts(groups)
#   if #groups == 0 then
#     return 'void'
#   end
#
#   local max_group_size = 0
#   for i, group in ldoc.ipairs(groups) do
#     if #group > max_group_size then
#       max_group_size = #group
#     end
#   end
#
#   if max_group_size == 1 then
#     -- No multi-return needed
#     local result = ''
#     for i, group in ldoc.ipairs(groups) do
#       if i ~= 1 then
#         result = result .. ' | '
#       end
#       for r in group:iter() do
#         result = result .. lua_to_ts(r.type)
#       end
#     end
#     return result
#   else
#     local result = 'LuaMultiReturn<'
#     for i, group in ldoc.ipairs(groups) do
#       if i ~= 1 then
#         result = result .. ' | '
#       end
#       result = result .. '['
#       local first = true
#       for r in group:iter() do
#         if not first then
#           result = result .. ', '
#         end
#         first = false
#         result = result .. lua_to_ts(r.type)
#       end
#       result = result .. ']'
#     end
#     return result .. '>'
#   end
# end
#
#
#
# if module then
#
# if module.summary then
/**
  * $(module.summary:gsub("\n", "\n  * "))
# --  * $(module.description:gsub("\n", "\n  * "))
  */
# end -- if module.summary
# if as_globals then
declare namespace $(module.name) {
# else
declare module '$(module.name)' {
# end
# local iter = ldoc.modules.iter
# for kind, items in module.kinds() do
# if kind ~= 'Functions' then
# else
#   for item in items() do
#     local desc = ldoc.descript(item):gsub("\n", "\n    * ")
  /**
    * $(desc)
#   for parm in iter(item.params) do
#     local param,sublist = item:subparam(parm)
#     if sublist then
#     end
#     for p in iter(param) do
#        local name,tp,def = item:display_name_of(p), item:type_of_param(p), item:default_of_param(p)
    * @param $(name)$(item.params.map[p]:gsub("\n", "\n    * "))
#     end
#     if sublist then
#     end
#   end -- for
#   if item.retgroups then
#     local groups = item.retgroups
#     for i,group in ldoc.ipairs(groups) do
#       local first = true
#       for r in group:iter() do
    * $(first and '@returns' or '        ') $(r.type) - $(r.text)
#         first = false
#       end
#     end -- for group
#   end -- if item.retgroups
#   if item.see then
#     for see in iter(item.see) do
    * @see $(see.label)
#     end
#   end
#   if item.since then
    * @since $(since)
#   end
    */
  export function $(item.name)(
#   for parm in iter(item.params) do
#     local param,sublist = item:subparam(parm)
#     for p in iter(param) do
#        local name,tp,def = item:display_name_of(p), item:type_of_param(p), item:default_of_param(p)
    $(name)$(def == true and '?' or '')$(tp ~= '' and ': ' .. tp or ''),
#     end
#   end -- for
  ): $(item.retgroups and retgroup_to_ts(item.retgroups) or 'void');
#   end
# end -- if kind
# end -- for module
}
# elseif ldoc.modules then -- if module
# for _, mod in ldoc.ipairs(ldoc.modules) do
/// <reference path="modules/$(mod.name).d.ts"/>
# end
# end -- if module
